[0m[[0m[0mdebug[0m] [0m[0mCreated transactional ClassFileManager with tempDir = /home/zhiyew/projects/fos/FOS/5-inference/target/scala-3.0.2/classes.bak[0m
[0m[[0m[0mdebug[0m] [0m[0mAbout to delete class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mWe backup class files:[0m
[0m[[0m[0mdebug[0m] [0m[0mRegistering generated classes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	TypeTree.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NatType$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Term.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Abs.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Zero.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NatType.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Succ.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	False.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoolTypeTree$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TypeVar.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TypeVar$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsZero.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Launcher$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FunTypeTree.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoolTypeTree.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Pred.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Let.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoolType$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	EmptyTypeTree$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NatTypeTree.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$TypeScheme$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Pred$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Abs$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Let$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Type.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoolType.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	EmptyTypeTree.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Succ$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Var.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FunType$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Launcher.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$TypeError$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	NatTypeTree$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	False$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	True$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FunType.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	FunTypeTree$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Parser.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	If$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$TypeScheme.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Parser$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	App$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	If.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Zero$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Var$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	True.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsZero$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$TypeError.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	App.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$.class[0m
[0m[[0m[0mdebug[0m] [0m[0m	TypeTree.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NatType$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Term.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Abs.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Zero.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NatType.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Succ.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	False.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoolTypeTree$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TypeVar.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	TypeVar$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsZero.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Launcher$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FunTypeTree.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoolTypeTree.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Pred.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Let.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoolType$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	EmptyTypeTree$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NatTypeTree.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$TypeScheme$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Pred$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Abs$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Let$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Type.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	BoolType.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	EmptyTypeTree.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Succ$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Var.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FunType$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Launcher.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$TypeError$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	NatTypeTree$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	False$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	True$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FunType.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	FunTypeTree$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Parser.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	If$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$TypeScheme.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Parser$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	App$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	If.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Zero$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Var$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	True.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	IsZero$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$TypeError.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	App.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0m	Infer$.tasty[0m
[0m[[0m[0mdebug[0m] [0m[0mRemoving the temporary directory used for backing up class files: /home/zhiyew/projects/fos/FOS/5-inference/target/scala-3.0.2/classes.bak[0m
